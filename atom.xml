<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>.erutuF</title>
  
  <subtitle>Reversed Future</subtitle>
  <link href="https://reversed-future.github.io/atom.xml" rel="self"/>
  
  <link href="https://reversed-future.github.io/"/>
  <updated>2023-11-03T16:13:34.403Z</updated>
  <id>https://reversed-future.github.io/</id>
  
  <author>
    <name>.erutuF</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023.10.24 SCNU SoCoding Puzzle</title>
    <link href="https://reversed-future.github.io/posts/d604.html"/>
    <id>https://reversed-future.github.io/posts/d604.html</id>
    <published>2023-10-26T16:00:00.000Z</published>
    <updated>2023-11-03T16:13:34.403Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning simple"><p>注意，本文章所有题目版权属于SCNU SoCoding协会</p></div><h4 id="题目来源于-华南师范大学-SoCoding-软件协会-2023-10-24-的1024-Puzzle活动，现已结束"><a href="#题目来源于-华南师范大学-SoCoding-软件协会-2023-10-24-的1024-Puzzle活动，现已结束" class="headerlink" title="题目来源于 华南师范大学 SoCoding 软件协会 2023.10.24 的1024 Puzzle活动，现已结束"></a>题目来源于 华南师范大学 <a href="https://oj.socoding.cn/">SoCoding</a> 软件协会 2023.10.24 的<a href="https://oj.socoding.cn/contest/view?id=617">1024 Puzzle活动</a>，现已结束</h4><div class="note info no-icon flat"><p>因为挺喜欢网安的，所以CTF类的“游戏”自然要参与参与，水平不行剩两道题没做，不过还行吧，接下来就是些做题及思考过程</p></div><h1 id="First-of-All"><a href="#First-of-All" class="headerlink" title="First of All"></a>First of All</h1><p><strong>先公布一下成果哈哈哈</strong></p><p><img src="https://www.z4a.net/images/2023/11/03/imagecc5d2ab45446c4de.png" alt=""></p><p>还算可以吧，接下来就是每一题啦</p><h1 id="做题过程-amp-部分题解"><a href="#做题过程-amp-部分题解" class="headerlink" title="做题过程&amp;部分题解"></a>做题过程&amp;部分题解</h1><h4 id="Problem-A-Cpp"><a href="#Problem-A-Cpp" class="headerlink" title="Problem A. Cpp"></a>Problem A. Cpp</h4><p>题面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> flag[] = &#123; <span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;g&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">//Tip1: flag=S(flag)，其中，S(n)是求和函数</span></span><br><span class="line"><span class="comment">//Tip2: flag是一串数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>虽然叫Cpp，但其实没有Cpp的经验也是可以做的</strong></p></li><li><p>由 char 可知，flag为 ‘S’, ‘o’, ‘C’, ‘o’, ‘d’, ‘i’, ‘n’, ‘g’ 的Ascii编码，见下表</p><p><img src="https://www.z4a.net/images/2023/11/04/image763535d2f0836e7c.png" alt="图源51wenda"></p><div class="note info flat"><p>该图的 83 对应字符应为 S</p></div></li><li><p>由Tip 1，flag = 83 + 111 + 67 + 111 + 100 +105 + 110 + 103 = 790</p></li><li><p>得解 <strong>flag = 790</strong></p></li></ol><h4 id="Problem-B-in-and-out"><a href="#Problem-B-in-and-out" class="headerlink" title="Problem B. in and out"></a>Problem B. in and out</h4><p>​    题面：</p><p>​        <img src="https://oj.socoding.cn/uploads/20231021/1697879649998.png" alt=""></p><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;!Latch，SR输入，XY互补输出， </span><br><span class="line">flag_is_7:X1Y1X2Y2X3Y3X4Y4</span><br></pre></td></tr></table></figure><ol><li>通过率仅有 16/389 的害人不浅的锁存器</li><li>由&amp;！可知，该图属于与非锁存器，查询真值表<img src="https://www.z4a.net/images/2023/11/04/image78834ac8ee2afabe.png" alt="图源CSDN">并由 “XY互补输出” 的提示可知</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X1Y1X2Y2X3Y3X4Y4 = 1101001</span><br></pre></td></tr></table></figure><ol><li><p>由 <strong>flag_is_7</strong> 的提示与 X1Y1X2Y2X3Y3X4Y4 的值，易知需要进行 <strong>二进制转七进制</strong> 的转换</p><p><img src="https://www.z4a.net/images/2023/11/03/image45b640740de169b7.png" alt="image-20231103210158311">得解：<strong>flag = 210</strong></p></li></ol><h4 id="Problem-D-fence"><a href="#Problem-D-fence" class="headerlink" title="Problem D. fence"></a>Problem D. fence</h4><p>​    题面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你能一次性跳过两道栅栏吗？ =Q7imjwHcG1D1FzTwHcnPE7CnWy3vVk2pW9WsElHpmgmpHTXoWhGpm=fkIVMUXxMIMxXgMUX1TVTJK5aRURZ9Y5dcYZZBcxZcbJdtK4a1Z9d 题目提示：flag内容是纯数字</span><br></pre></td></tr></table></figure><ol><li><p>这个等号让我很难不想到 Base64 呢🤔</p><ol><li><p>于是按照栅栏密码的规则进行排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=Q7imjwHcG1D1FzTwHcnPE7CnWy3vVk2pW9WsElHpmgmpHTXoWhGpm</span><br><span class="line">=fkIVMUXxMIMxXgMUX1TVTJK5aRURZ9Y5dcYZZBcxZcbJdtK4a1Z9d</span><br></pre></td></tr></table></figure><p>会得到这样的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==Qf7kiImVjMwUHXcxGM1IDM1xFXzgTMwUHXc1nTPVET7JCKn5WayR3UvRVZk92Yp5Wd9cWYsZEZlBHcpxmZgcmbpJHdTtXKo4Wah1GZp9md</span><br></pre></td></tr></table></figure></li><li><p>但通常 Base64 转换后，等号应在最后，那么我们将其从前往后写，便得到这样一串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dm9pZG1haW4oKXtTdHJpbmcgZmxpcHBlZEZsYWc9dW5pY29kZVRvU3RyaW5nKCJ7TEVPTn1cXHUwMTgzXFx1MDI1MGxcXHUwMjVmIik7fQ==</span><br></pre></td></tr></table></figure></li><li><p>经过 <a href="https://base64.us/">Base64</a> 解密后，得到了一串看起来像是代码的<strong><u>伪代码</u></strong><img src="https://www.z4a.net/images/2023/11/03/image81cd6c4bd75dea32.png" alt="image-20231103205045361"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">voidmain()&#123;String flippedFlag=unicodeToString(&quot;&#123;LEON&#125;\\u0183\\u0250l\\u025f&quot;);&#125;</span><br></pre></td></tr></table></figure></li><li><p>看到这个u打头，好！果断认定为Unicode编码，进行 <a href="https://unicode.chacd.com/">Unicode</a> 转换后<img src="https://www.z4a.net/images/2023/11/03/image20646bd4c7fe1396.png" alt="image-20231103205225279"></p><p>进行重新排序就会得到这么个东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;LEON&#125;ƃɐlɟ</span><br></pre></td></tr></table></figure></li><li><p>好像 flag 倒过来了捏，转一转吧！<img src="https://www.z4a.net/images/2023/11/03/imagec68e359171ef883a.png" alt="image-20231103205624212"></p><p>LEON倒过来了，什么意思…</p></li><li><p>百度一下，好吧，我宣布二次元获胜<img src="https://www.z4a.net/images/2023/11/03/image1edd94649b8e16d4.png" alt="image-20231103205748011"></p></li><li><p>得解：<strong>flag = 11037</strong></p></li></ol></li></ol><h4 id="Problem-E-是黑芙还是白芙"><a href="#Problem-E-是黑芙还是白芙" class="headerlink" title="Problem E. 是黑芙还是白芙"></a>Problem E. 是黑芙还是白芙</h4><p>​    题面：<img src="https://ooo.0x0.ooo/2023/10/16/O7zMXY.png" alt=""></p><ol><li><p>经典的图片隐写题</p></li><li><p>由 <strong>“黑芙”，“白芙”</strong> 的题面，可知要对图像进行处理</p></li><li><p>拿出祖传的 <strong>Stegsolve</strong> 来进行处理，可得<img src="https://www.z4a.net/images/2023/11/03/imagea22e1694f81dc73d.png" alt="image-20231103210537879"></p></li><li><p>不是，这二维码也太小了吧，将图片放大后再进行相同处理，可得<img src="https://www.z4a.net/images/2023/11/03/image99c2c53be58fd877.png" alt="image-20231103210614586"></p></li><li><p>通过 <a href="https://cli.im/deqr/other">草料</a> 进行解码，可得<img src="https://www.z4a.net/images/2023/11/03/image636908246698f570.png" alt="image-20231103210809626"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">佛又曰：输迦啰栗苏摩阿啰数埵帝嚧诃菩他数罚输悉迦孕无嚧孕怛迦埵遮怛烁阿伊穆漫</span><br></pre></td></tr></table></figure></li><li><p>佛曰嘛，这我熟！！！👻，利用 <a href="http://www.atoolbox.net/Tool.php?Id=1027">与佛论道</a> 转换后<img src="https://www.z4a.net/images/2023/11/03/image5ef895bf7bbb091d.png" alt="image-20231103211343249"></p></li><li><p>得解 <strong>flag = succ3ss</strong></p></li></ol><h4 id="Problem-F-Minecraft"><a href="#Problem-F-Minecraft" class="headerlink" title="Problem F. Minecraft"></a>Problem F. Minecraft</h4><p>​    题面：</p><p>​        <em>Galaxy 已经整整 3600 秒没玩过 Minecraft 了！但他现在还得去出 1024 的题目，痛苦挣扎之后，他决定用麦块出一道题，所以他打开了他的 Java 1.16+</em></p><p><em>很明显这个 b 玩起游戏来就把题目忘得一干二净，最后只能是卡着 ddl 交了个不知道算什么东西的<a href="https://cloud.socoding.cn/s/yP8u9">文件</a>……</em></p><ol><li><p><del>就这也想难倒我这个 Minecraft 老玩家？</del></p></li><li><p>下载文件并解压后得到一个 <strong>.mca</strong> 文件<img src="https://www.z4a.net/images/2023/11/03/imagefa7fc4f91b3eb5c6.png" alt="image-20231103211714103"></p></li><li><p>很容易知道这是Minecraft地图内的<strong>区块文件</strong>，或者也可以通过百度知道<img src="https://s1.vika.cn/space/2023/11/03/6b3c15e6a0a842948d643c2290b08d60" alt="img"></p></li><li><p>跟据题面，下载<strong>Minecraft 1.16+</strong> 的版本，并创建地图，并将 r.0.0.mca 用下载的文件<strong>覆盖</strong><img src="https://www.z4a.net/images/2023/11/03/image239251d5d6ab6850.png" alt="image-20231103213245785"></p></li><li><p>打开地图在四周查看就可以看见被覆盖的区块，讲台上有一本书<img src="https://www.z4a.net/images/2023/11/03/image29de68eb2515b7d5.png" style="zoom: 50%;" /></p></li><li><p>做一个最优解问题（我这么难的部分都解出来了你居然还在里面塞题 <strong>QwQ</strong> ）</p><p><img src="https://www.z4a.net/images/2023/11/03/imaged346c18fe6bf958a.png" alt="image-20231103212709491" style="zoom: 33%;" /><img src="https://www.z4a.net/images/2023/11/03/image-20231103212721195.png" alt="image-20231103212721195" style="zoom: 33%;" /><img src="https://www.z4a.net/images/2023/11/03/image54aa9bb09f94035b.png" alt="image-20231103212746314" style="zoom:33%;" /><img src="https://www.z4a.net/images/2023/11/03/image-20231103212754280.png" alt="image-20231103212754280" style="zoom:33%;" /></p><p>还算简单，暂且原谅你</p></li><li><p>最优解为 80 + 29 +27 = 136 ( 用时58s ) ，得解：<strong>flag = 136</strong></p></li></ol><h4 id="Problem-H-flag-py"><a href="#Problem-H-flag-py" class="headerlink" title="Problem H. flag.py"></a>Problem H. flag.py</h4><p>​    题面：</p><p>​        这是一道寻找flag的题目，但出题者在设计它前绞尽脑汁，仍然灵感枯竭。为了赶DDL，出题者只好临时写了一个py脚本，选手只需    要输入正确的密钥，就能获得flag：</p><p>​    <a href="https://www.123pan.com/s/7d2jVv-xtnNv.html">flag.py</a></p><ol><li>哈！.py  这不专业对口了嘛😍</li><li>打开后提示说要输入Key，源代码都有了为什么不直接找呢<img src="https://www.z4a.net/images/2023/11/03/imageaede829905438a5a.png" alt="image-20231103213956178" style="zoom:50%;" /></li><li>居然直接定义了一个全是字符的字符集…，连之前显示的都是通过索引一个一个排出来的，可恶，好狠的人<img src="https://www.z4a.net/images/2023/11/03/image74b4c0ce507312c8.png" alt="image-20231103213953152"></li><li>于是我一个个将它们 print 出来，并进行修改，得到了这么个代码<img src="https://www.z4a.net/images/2023/11/03/image8d1c5fd3a832ee0b.png" alt="image-20231103214301396"></li><li>虽然还不能直接看见 flag ，但通过研究代码我们可以知道，我们需要的 Key 应该是 1145141919810（好臭的数…），重新打开并输入 Key ，我靠甚至不愿写一个停留显示…好吧，在 Pycharm 的IDLE模式下打开，再输入 Key<img src="https://www.z4a.net/images/2023/11/03/imagec5cb54129fa72563.png" alt="image-20231103214732118"></li><li>得解：<strong>flag = 0v0</strong></li></ol><h4 id="Problem-I-咕咕"><a href="#Problem-I-咕咕" class="headerlink" title="Problem I. 咕咕"></a>Problem I. 咕咕</h4><p>​    <strong>题面：</strong><img src="https://oj.socoding.cn/uploads/20231021/16978699795708.png" alt=""></p><ol><li><p>这里的图片实际上是超链接，但我还不会用 Markdown 写这个语法，在此将链接贴出</p><p><a href="https://cloud.socoding.cn/s/DqyTn">谜题包</a></p></li><li><p>解压谜题包，得到两个文件<img src="https://www.z4a.net/images/2023/11/03/image76aa12c63314ad55.png" alt="image-20231103215542201"></p></li><li><p>解压 咕咕.zip 却发现要密码！看来只能从 咕咕.png 下手了</p></li><li><p>Stegsolve 查看无果，好像只能用<a href="hexed.it">16进制</a>打开来入手了<img src="https://www.z4a.net/images/2023/11/03/image228461be4cd2784c.png" alt="image-20231103215735288"></p><p>果然，在末尾找到了这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip&#x27;s password:AK_1024_AC_AKCUP</span><br></pre></td></tr></table></figure><p>很显然，这是压缩包的密码</p></li><li><p>输入 <code>AK_1024_AC_AKCUP</code> 来解压<img src="https://z1.ax1x.com/2023/11/03/piMRDBt.png" alt="image-20231103220010578"></p></li><li><p>打开 flag.xlsx ，不用多说，单元格被锁定，且根据提示，我们新建一个 Sheet ，然后利用 Excel 文件的引用功能得到有内容的单元格<img src="https://z1.ax1x.com/2023/11/03/piMRyAf.png" alt="image-20231103221050751" style="zoom:80%;" /></p></li><li><p>那我们就像这样做</p><p><img src="https://www.z4a.net/images/2023/11/04/image5fdcfb4e2f2e102f.png" style="zoom:50%;" /><img src="https://www.z4a.net/images/2023/11/04/image3062fd2075bfa7ff.png" alt="image-20231103220909221" style="zoom:50%;" /><img src="https://www.z4a.net/images/2023/11/04/image4722607239cadf30.png" style="zoom: 67%;" /></p><p><strong>啊哈！抓到你了！</strong></p></li><li><p>得解：<strong>flag = Socoding_1024</strong></p></li></ol><h4 id="Problem-J-宇宙讯息"><a href="#Problem-J-宇宙讯息" class="headerlink" title="Problem J. 宇宙讯息"></a>Problem J. 宇宙讯息</h4><p>​    题面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">宇宙中传来了一段讯息…</span><br><span class="line"></span><br><span class="line">Loading… 3%… 42%… 86%… 100%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dash-dot-dot-dot-dot Dash-dash-dot-dot-dot Dash-dot-dot-dot-dot Dash-dash-dash-dash-dot Dash-dash-dot-dot-dot Dot-dot-dot-dot-dash Dash-dot-dot-dot-dot Dash-dash-dash-dot-dot Dash-dash-dot-dot-dot Dot-dot-dot-dot-dot Dash-dot-dot-dot-dot Dot-dot-dash-dash-dash Dot-dot-dash-dash-dash Dot Dash-dot-dot-dot-dot Dot-dot-dot-dash-dash Dash-dot-dot-dot-dot Dot-dot-dash-dot Dash-dot-dot-dot-dot Dash-dot-dot Dot-dot-dash-dash-dash Dot-dot-dash-dot Dash-dash-dot-dot-dot Dash-dash-dash-dash-dash Dash-dash-dot-dot-dot Dot-dot-dash-dash-dash Dash-dot-dot-dot-dot Dash-dash-dash-dash-dot Dash-dash-dot-dot-dot Dash-dot-dot-dot-dot Dash-dot-dot-dot-dot Dot-dash-dash-dash-dash Dash-dash-dot-dot-dot Dot-dot-dot-dot-dash Dash-dot-dot-dot-dot Dot-dot-dot-dot-dot Dash-dot-dot-dot-dot Dot-dash-dash-dash-dash Dash-dot-dot-dot-dot Dot-dot-dot-dash-dash Dot-dot-dot-dot-dash Dot-dot-dot-dash-dash Dash-dot-dot-dot-dot Dot Dash-dash-dot-dot-dot Dot-dot-dot-dot-dash</span><br></pre></td></tr></table></figure><ol><li><p>好好好，你连 <strong>.</strong> 和 <strong>-</strong> 都不愿意打…</p></li><li><p>利用Word文档强大的替换功能，可以得到这样的一串莫斯密码</p><figure class="highlight plaintext"><figcaption><span>code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-.... --... -.... ----. --... ....- -.... ---.. --... ..... -.... ..--- ..--- . -.... ...-- -.... ..-. -.... -.. ..--- ..-. --... ----- --... ..--- -.... ----. --... -.... -.... .---- --... ....- -.... ..... -.... .---- -.... ...-- ....- ...-- -.... . --... ....-</span><br></pre></td></tr></table></figure></li><li><p>经过翻译后得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6769746875622e636f6d2f707269766174656163436e74</span><br></pre></td></tr></table></figure></li><li><p>看到有数字和e之类的字母，我又想到了 Unicode 编码，于是进行分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">67 69 74 68 75 62 2e 63 6f 6d 2f 70 72 69 76 61 74 65 61 63 43 6e 74</span><br></pre></td></tr></table></figure><p>并对照 <a href="https://www.unicodery.com/">对照表</a> 进行查询，得到一串网址，<del>是程序员都爱用的Github</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github.com/privateacCnt</span><br></pre></td></tr></table></figure></li><li><p>进入网址，中间走了好多弯路我就跳过了，总之可以在 Labels 里面发现一个网址<img src="https://z1.ax1x.com/2023/11/03/piMRc4S.png" alt="image-20231103223336232"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/privateacCnt/issue-tracker/files/13111671/Multi-part.Archive.Pack.zip</span><br></pre></td></tr></table></figure></li><li><p>下载后解压该压缩包<img src="https://www.z4a.net/images/2023/11/03/imagec7522ff8b02687e6.png" alt="image-20231103222641307"></p><p>这个 .z01 已经很明显知道是分卷压缩了，而且压缩包名 Multi-part.Archive.Pack 也作了明显的提示</p></li><li><p>更改文件名及后缀，解压可得一个  .psd 文件，好好好，又要我去下 PhotoShop …<img src="C:\Users\junya\AppData\Roaming\Typora\typora-user-images\image-20231103222857710.png" alt="image-20231103222857710"></p><ol><li><p>好像左下角蒙版那有不一样的地方<img src="https://z1.ax1x.com/2023/11/03/piMR6N8.png" alt=""></p><p> 但是PhotoShop怎么调我不会，反正捣鼓捣鼓就整出来了个这</p></li></ol><p><img src="https://z1.ax1x.com/2023/11/03/piMRR3Q.png" alt="image-20231103223501782"></p></li><li><p>得解：<strong>flag = y0u_did_it</strong></p></li></ol><h4 id="Problem-K-洋葱"><a href="#Problem-K-洋葱" class="headerlink" title="Problem K.  洋葱"></a>Problem K.  洋葱</h4><p>​    题面：</p><ol><li><p>剥洋葱呗，看起来得有3层<img src="https://www.z4a.net/images/2023/11/03/image91810f7c6df3dfb2.png" alt="image-20231103231130286"></p><p><a href="https://cloud.socoding.cn/s/eE9fY">flag</a> </p></li><li><p>下载压缩包，并尝试解压，可恶要密码！这就是第一层了吗，不过好像有提示<img src="https://www.z4a.net/images/2023/11/03/imaged5ca3ae178701a4c.png" alt="image-20231103223818549"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password: 63 32 39 6a 62 32 52 70 62 6d 63 3d</span><br></pre></td></tr></table></figure><p>显然这又是 Unicode 编码…</p></li><li><p><a href="https://www.unicodery.com/">Unicode</a> 解码咯，解得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c29jb2Rpbmc=</span><br></pre></td></tr></table></figure><p>干嘛…还套一层 Base64 是吧</p></li><li><p>还是用 <a href="https://base64.us/">Base64</a> 进行解码，得</p><p><img src="https://z1.ax1x.com/2023/11/03/piMRfjs.png" alt="image-20231103224522353"></p><p><del>这是不是可以蒙出来</del></p></li><li><p>得到一个 .exe (可执行文件)，让我康康！<img src="https://z1.ax1x.com/2023/11/03/piMR4un.png" alt="image-20231103224712008"></p></li><li><p>？？？要我<strong>反编译</strong>！？？？彳亍，咱迎难而上<img src="https://www.z4a.net/images/2023/11/03/imagea82ecf03bb4792be.png" alt="image-20231103224826386"></p><p>这里我们使用 <strong>ghidra</strong> 进行反编译</p><p><img src="https://z1.ax1x.com/2023/11/03/piMRIH0.png" alt="image-20231103224946830" style="zoom:50%;" /></p><p><del>不得不说这软件挺帅的</del></p></li><li><p>创建一个项目，并使用 ghidra 的 CodeBroswer 功能来浏览源代码</p><p><img src="https://www.z4a.net/images/2023/11/04/image.png" alt="image-20231103225225312"></p><p>浅浅地导入一下</p></li><li><p>使用右侧点击定位源代码的位置<img src="https://www.z4a.net/images/2023/11/03/image868514449179838d.png" alt="image-20231103225336283"></p></li><li><p>根据提示 <strong>The flag is above me in source code.</strong> 的提示，浏览该代码所在位置上方的代码<img src="https://www.z4a.net/images/2023/11/03/image520b626790107538.png" alt="image-20231103230006848"></p><p>熟悉的 <strong>Unicode</strong> 又出现了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x48 0x65 0x6c 0x6c 0x 6f 0x2c 0x77 0x6f 0x72 0x6c 0x64 0x21</span><br></pre></td></tr></table></figure></li></ol><ol><li><p><a href="https://www.unicodery.com/">Unicode</a> 解码叭，解得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world!</span><br></pre></td></tr></table></figure></li><li><p>得解：<strong>flag = Hello,world!</strong></p></li></ol><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>​        <strong>至此，我的解题已经到此结束，虽然仍旧有两道题的遗憾，但也无妨，我的代码人生，从 Hello, world 开始，却不会以 Hello, world 结束</strong></p><p>​        <strong>祝自己，1024，程序员节，快乐</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning simple&quot;&gt;&lt;p&gt;注意，本文章所有题目版权属于SCNU SoCoding协会&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&quot;题目来源于-华南师范大学-SoCoding-软件协会-2023-10-24-的1024-Puzzle活动，现已</summary>
      
    
    
    
    <category term="代码人生" scheme="https://reversed-future.github.io/categories/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/"/>
    
    
    <category term="代码人生" scheme="https://reversed-future.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>路.</title>
    <link href="https://reversed-future.github.io/posts/51af.html"/>
    <id>https://reversed-future.github.io/posts/51af.html</id>
    <published>2023-03-17T19:51:56.000Z</published>
    <updated>2023-11-01T14:17:32.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路"><a href="#路" class="headerlink" title="路"></a><center>路</center></h1><center><strong>爱是一种最微不足道的感情</strong></center><center><strong>是无声的呐喊  是无形的具体</strong></center><center><strong>也许爱也是恨</strong></center><center><strong>是单向的航程  是没有尽头的路</strong></center><center><strong>我们渴望爱</strong></center><center><strong>恨不得将每一个脚印烙在这满地的泥泞上</strong></center><center><strong>让尸体随着爱意腐烂</strong></center><center><strong>月光为我哭丧  飘云为我落泪</strong></center><center><strong>繁星揉着眼睛</strong></center><center><strong>模糊了视线  也模糊了我唯一的具象</strong></center><center><strong>我们曾在爱里降临  伴着哭声</strong></center><center><strong>如今在苦痛中生长  始终带笑</strong></center><center><strong>灵魂归附于爱</strong></center><center><strong>爱融入我的灵魂</strong></center><center><strong>领着下一世的赶路人</strong></center><center><strong>走着无尽的路</strong></center><p><strong><p align="right">.erutuF</p></strong><br><strong><p align="right">Mar. 18th 2023</p></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;路&quot;&gt;&lt;a href=&quot;#路&quot; class=&quot;headerlink&quot; title=&quot;路&quot;&gt;&lt;/a&gt;&lt;center&gt;路&lt;/center&gt;&lt;/h1&gt;&lt;center&gt;&lt;strong&gt;爱是一种最微不足道的感情&lt;/strong&gt;&lt;/center&gt;


&lt;center&gt;&lt;st</summary>
      
    
    
    
    <category term="诗集" scheme="https://reversed-future.github.io/categories/%E8%AF%97%E9%9B%86/"/>
    
    
    <category term="诗·云" scheme="https://reversed-future.github.io/tags/%E8%AF%97%C2%B7%E4%BA%91/"/>
    
  </entry>
  
</feed>
